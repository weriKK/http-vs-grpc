// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CarDataServiceClient is the client API for CarDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarDataServiceClient interface {
	GetCarData(ctx context.Context, in *CarDataRequest, opts ...grpc.CallOption) (*CarDataResponse, error)
}

type carDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarDataServiceClient(cc grpc.ClientConnInterface) CarDataServiceClient {
	return &carDataServiceClient{cc}
}

func (c *carDataServiceClient) GetCarData(ctx context.Context, in *CarDataRequest, opts ...grpc.CallOption) (*CarDataResponse, error) {
	out := new(CarDataResponse)
	err := c.cc.Invoke(ctx, "/grpcapi.CarDataService/GetCarData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarDataServiceServer is the server API for CarDataService service.
// All implementations must embed UnimplementedCarDataServiceServer
// for forward compatibility
type CarDataServiceServer interface {
	GetCarData(context.Context, *CarDataRequest) (*CarDataResponse, error)
	mustEmbedUnimplementedCarDataServiceServer()
}

// UnimplementedCarDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarDataServiceServer struct {
}

func (UnimplementedCarDataServiceServer) GetCarData(context.Context, *CarDataRequest) (*CarDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarData not implemented")
}
func (UnimplementedCarDataServiceServer) mustEmbedUnimplementedCarDataServiceServer() {}

// UnsafeCarDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarDataServiceServer will
// result in compilation errors.
type UnsafeCarDataServiceServer interface {
	mustEmbedUnimplementedCarDataServiceServer()
}

func RegisterCarDataServiceServer(s *grpc.Server, srv CarDataServiceServer) {
	s.RegisterService(&_CarDataService_serviceDesc, srv)
}

func _CarDataService_GetCarData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarDataServiceServer).GetCarData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.CarDataService/GetCarData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarDataServiceServer).GetCarData(ctx, req.(*CarDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CarDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.CarDataService",
	HandlerType: (*CarDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarData",
			Handler:    _CarDataService_GetCarData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcapi.proto",
}
